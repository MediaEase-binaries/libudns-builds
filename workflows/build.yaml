name: libudns CI CD

on:
  push:
    branches: [main]

jobs:
  build_package:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        ipv6: ["ON", "OFF"]
        os: [ubuntu-latest]
        version: ["0.4.0", "0.5.0", "0.6.0"]
      fail-fast: false

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Build libudns
        run: |
          chmod +x ./build.sh
          flag=$([ "${{ matrix.ipv6 }}" == "ON" ] && echo "--enable-ipv6" || echo "--disable-ipv6")
          ./build.sh ${{ matrix.version }} $flag

      - name: Create Debian package
        run: |
          PKG_DIR="package_libudns"
          mkdir -p "$PKG_DIR/DEBIAN" "$PKG_DIR/usr"
          cp -r custom_build/install/usr/* "$PKG_DIR/usr/"
          installed_size=$(du -s -k "$PKG_DIR" | cut -f1)
          cat > "$PKG_DIR/DEBIAN/control" <<EOF
          Package: libudns
          Version: ${{ matrix.version }}-1build1
          Architecture: amd64
          Maintainer: Thomas Chauveau <contact.tomc@yahoo.com>
          Installed-Size: $installed_size
          Depends: libc6
          Section: net
          Priority: optional
          Homepage: https://libudns.sourceforge.io/
          Description: Lightweight XML-RPC library for C and C++
            libudns is a lightweight, portable, and efficient library for XML-RPC communication.
            .
            Version: ${{ matrix.version }}
            .
            Compiled on $(date +%Y-%m-%d).
          EOF
          cd "$PKG_DIR"
          find usr -type f -exec md5sum {} \; > DEBIAN/md5sums
          cd ..
          dpkg-deb --build -Zxz -z9 -Sextreme "$PKG_DIR" "libudns_${{ matrix.version }}-ipv6-${{ matrix.ipv6 }}-1build1_${{ matrix.os }}_amd64.deb"
          mkdir artifacts
          mv *.deb artifacts/

      - name: Upload Debian package
        uses: actions/upload-artifact@v4
        with:
          name: libudns-${{ matrix.version }}-ipv6-${{ matrix.ipv6 }}
          path: artifacts/*.deb

  create_release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: build_package

    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: downloaded_artifacts

      - name: Prepare release assets
        id: prepare_release
        run: |
          mkdir release_assets
          find downloaded_artifacts -type f -exec cp {} release_assets/ \;
          echo "today=$(date +'%Y%m%d')" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          name: Release ${{ steps.prepare_release.outputs.today }}
          tag_name: v${{ steps.prepare_release.outputs.today }}
          generate_release_notes: true
          files: |
            release_assets/*
